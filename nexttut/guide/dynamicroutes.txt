//--------------------------------------------------------------------------------------------
//-Dynamic Routes
//--------------------------------------------------------------------------------------------

	-dynamic routes with getStaticPaths()
	-getStaticProps to fetch data for each blog post
	-rendering markdown with remark
	-pretty-print dates
	-link to a page with dynamic routes


//--------------------------------------------------------------------------------------------
//-Page Path Depends on External Data
//--------------------------------------------------------------------------------------------

In this lesson, we’ll talk about the case where each page path depends on external data. 
Next.js allows you to statically generate pages with paths that depend on external data. 
This enables dynamic URLs in Next.js.

for the blog
lets say we want each post to have the path /posts/<id> where <id> is the name of the markdown file

create a page called [id].js under pages/posts
	all dynamic routes are named this way

the plan is to implement these three functions
------------------------------------------------
import Layout from '../../components/layout';

export default function Post() {
  return <Layout>...</Layout>;
}

export async function getStaticPaths() {
  // Return a list of possible value for id
}

export async function getStaticProps({ params }) {
  // Fetch necessary data for the blog post using params.id
}
------------------------------------------------

export function getAllPostIds() {
  const fileNames = fs.readdirSync(postsDirectory);

  // Returns an array that looks like this:
  // [
  //   {
  //     params: {
  //       id: 'ssg-ssr'
  //     }
  //   },
  //   {
  //     params: {
  //       id: 'pre-rendering'
  //     }
  //   }
  // ]
  return fileNames.map((fileName) => {
    return {
      params: {
        id: fileName.replace(/\.md$/, ''),
      },
    };
  });
}

Important: The returned list is not just an array of strings — it must be an array of objects that look like the comment above. Each object must have the params key and contain an object with the id key (because we’re using [id] in the file name). Otherwise, getStaticPaths will fail.

pages/posts/[id].js
--------------------------------------------------------
import { getAllPostIds } from '../../lib/posts';

export async function getStaticPaths() {
  const paths = getAllPostIds();
  return {
    paths,
    fallback: false,
  };
}
--------------------------------------------------------